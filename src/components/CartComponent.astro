---
// CartComponent.astro - Handles the shopping cart functionality
// This component is imported in the Layout.astro file

// Import cart utilities if needed
import { storeData } from '../layouts/data';

// Get store data for tax and shipping calculations
const storeInfo = await storeData;
const store = {
  storename: storeInfo.store.storename,
  freeship: storeInfo.store.freeship ? true : false,
  statetax: storeInfo.store.statetax || 0,
  localtax: storeInfo.store.localtax || 0,
  taxshipping: storeInfo.store.taxshipping ? true : false,
  shiprate: storeInfo.store.shiprate || 0,
};

// Format price function
const formatPrice = (price: number | string): string => {
  if (typeof price === 'number') {
    return price.toFixed(2);
  }
  if (typeof price === 'string') {
    const parsedPrice = parseFloat(price);
    return isNaN(parsedPrice) ? '0.00' : parsedPrice.toFixed(2);
  }
  return '0.00';
};
---

<!-- Cart Sidebar -->
<div id="cart-sidebar" class="fixed top-0 right-0 h-full w-full md:w-96 bg-white dark:bg-gray-800 shadow-xl transform translate-x-full transition-transform duration-300 ease-in-out z-50">
  <div class="flex flex-col h-full">
    <!-- Cart Header -->
    <div class="p-4 border-b border-gray-200 dark:border-gray-700 flex justify-between items-center">
      <h2 class="text-xl font-bold text-gray-900 dark:text-white">Your Cart</h2>
      <button id="close-cart" class="text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
        </svg>
      </button>
    </div>
    
    <!-- Cart Items -->
    <div id="cart-items" class="flex-grow overflow-y-auto p-4">
      <!-- Cart items will be dynamically inserted here -->
      <div class="text-center text-gray-500 dark:text-gray-400 py-8" id="empty-cart-message">
        Your cart is empty
      </div>
    </div>
    
    <!-- Cart Summary -->
    <div class="border-t border-gray-200 dark:border-gray-700 p-4">
      <div class="space-y-2 mb-4">
        <div class="flex justify-between">
          <span class="text-gray-600 dark:text-gray-400">Subtotal</span>
          <span id="cart-subtotal" class="font-medium text-gray-900 dark:text-white">$0.00</span>
        </div>
        <div class="flex justify-between">
          <span class="text-gray-600 dark:text-gray-400">Tax</span>
          <span id="cart-tax" class="font-medium text-gray-900 dark:text-white">$0.00</span>
        </div>
        <div class="flex justify-between">
          <span class="text-gray-600 dark:text-gray-400">Shipping</span>
          <span id="cart-shipping" class="font-medium text-gray-900 dark:text-white">$0.00</span>
        </div>
        <div class="flex justify-between pt-2 border-t border-gray-200 dark:border-gray-700">
          <span class="text-lg font-bold text-gray-900 dark:text-white">Total</span>
          <span id="cart-total" class="text-lg font-bold text-gray-900 dark:text-white">$0.00</span>
        </div>
      </div>
      
      <a 
        href="/checkout" 
        id="checkout-button"
        class="w-full bg-red-600 hover:bg-red-700 text-white py-3 px-4 rounded-md font-semibold transition text-center opacity-50 cursor-not-allowed"
        aria-disabled="true"
      >
        Proceed to Checkout
      </a>
    </div>
  </div>
</div>

<!-- Cart Overlay -->
<div id="cart-overlay" class="fixed inset-0 bg-black bg-opacity-50 z-40 hidden"></div>

<script define:vars={{ storeFreeship: store.freeship, storeStateTax: store.statetax, storeLocalTax: store.localtax, storeTaxShipping: store.taxshipping, storeShipRate: store.shiprate }}>
  // Cart functionality
  document.addEventListener('DOMContentLoaded', () => {
    // DOM elements
    const cartSidebar = document.getElementById('cart-sidebar');
    const cartOverlay = document.getElementById('cart-overlay');
    const closeCartBtn = document.getElementById('close-cart');
    const cartItemsContainer = document.getElementById('cart-items');
    const emptyCartMessage = document.getElementById('empty-cart-message');
    const cartSubtotal = document.getElementById('cart-subtotal');
    const cartTax = document.getElementById('cart-tax');
    const cartShipping = document.getElementById('cart-shipping');
    const cartTotal = document.getElementById('cart-total');
    const checkoutButton = document.getElementById('checkout-button');
    
    // Store data for calculations
    const storeData = {
      freeship: storeFreeship,
      statetax: storeStateTax,
      localtax: storeLocalTax,
      taxshipping: storeTaxShipping,
      shiprate: storeShipRate
    };
    
    // Open cart function
    function openCart() {
      if (cartSidebar) {
        cartSidebar.classList.remove('translate-x-full');
      }
      if (cartOverlay) {
        cartOverlay.classList.remove('hidden');
      }
      document.body.classList.add('overflow-hidden');
    }
    
    // Make openCart available globally
    window.openCart = openCart;
    
    // Close cart function
    function closeCart() {
      if (cartSidebar) {
        cartSidebar.classList.add('translate-x-full');
      }
      if (cartOverlay) {
        cartOverlay.classList.add('hidden');
      }
      document.body.classList.remove('overflow-hidden');
    }
    
    // Event listeners
    if (closeCartBtn) {
      closeCartBtn.addEventListener('click', closeCart);
    }
    if (cartOverlay) {
      cartOverlay.addEventListener('click', closeCart);
    }
    
    // Listen for cart toggle events
    document.addEventListener('click', (e) => {
      const target = e.target;
      if (target instanceof Element && target.closest('.cart-toggle')) {
        openCart();
      }
    });
    
    // Render cart
    function renderCart() {
      const cartData = localStorage.getItem('cart');
      const cart = cartData ? JSON.parse(cartData) : [];
      
      // Show/hide empty cart message
      if (!cartItemsContainer || !emptyCartMessage || !checkoutButton) return;
      
      if (cart.length === 0) {
        emptyCartMessage.classList.remove('hidden');
        checkoutButton.setAttribute('aria-disabled', 'true');
        checkoutButton.classList.add('opacity-50', 'cursor-not-allowed');
        cartItemsContainer.innerHTML = '';
        updateCartTotals(0, 0, 0, 0);
        return;
      }
      
      emptyCartMessage.classList.add('hidden');
      checkoutButton.setAttribute('aria-disabled', 'false');
      checkoutButton.classList.remove('opacity-50', 'cursor-not-allowed');
      
      // Clear cart items container
      cartItemsContainer.innerHTML = '';
      
      // Calculate subtotal
      let subtotal = 0;
      
      // Render each cart item
      cart.forEach((item, index) => {
        const itemTotal = item.price * item.quantity;
        subtotal += itemTotal;
        
        const itemElement = document.createElement('div');
        itemElement.className = 'flex items-start py-4 border-b border-gray-200 dark:border-gray-700 last:border-0';
        itemElement.innerHTML = `
          <div class="h-20 w-20 flex-shrink-0 overflow-hidden rounded-md border border-gray-200 dark:border-gray-700">
            <img src="${item.image}" alt="${item.name}" class="h-full w-full object-cover object-center">
          </div>
          <div class="ml-4 flex flex-1 flex-col">
            <div class="flex justify-between text-base font-medium text-gray-900 dark:text-white">
              <h3>
                <a href="/product_${item.id}">${item.name}</a>
              </h3>
              <p class="ml-4">$${(item.price * item.quantity).toFixed(2)}</p>
            </div>
            <div class="flex items-center mt-2">
              <button class="decrement-item text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200" data-index="${index}">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                  <path fill-rule="evenodd" d="M3 10a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1z" clip-rule="evenodd" />
                </svg>
              </button>
              <span class="mx-2 text-gray-700 dark:text-gray-300">${item.quantity}</span>
              <button class="increment-item text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200" data-index="${index}">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                  <path fill-rule="evenodd" d="M10 3a1 1 0 011 1v5h5a1 1 0 110 2h-5v5a1 1 0 11-2 0v-5H4a1 1 0 110-2h5V4a1 1 0 011-1z" clip-rule="evenodd" />
                </svg>
              </button>
              <button class="remove-item ml-auto text-red-500 hover:text-red-700" data-index="${index}">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                  <path fill-rule="evenodd" d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z" clip-rule="evenodd" />
                </svg>
              </button>
            </div>
          </div>
        `;
        
        cartItemsContainer.appendChild(itemElement);
      });
      
      // Calculate tax and shipping
      const tax = calculateTax(subtotal);
      const shipping = calculateShipping(subtotal);
      const total = subtotal + tax + shipping;
      
      // Update cart totals
      updateCartTotals(subtotal, tax, shipping, total);
      
      // Add event listeners to cart item buttons
      addCartItemEventListeners();
    }
    
    // Calculate tax
    function calculateTax(subtotal) {
      const taxRate = (parseFloat(storeData.statetax.toString()) + parseFloat(storeData.localtax.toString())) / 100;
      let taxableAmount = subtotal;
      
      // If shipping is taxable, add it to the taxable amount
      if (storeData.taxshipping) {
        const shipping = calculateShipping(subtotal);
        taxableAmount += shipping;
      }
      
      return taxableAmount * taxRate;
    }
    
    // Calculate shipping
    function calculateShipping(subtotal) {
      // Free shipping if enabled and subtotal is greater than 0
      if (storeData.freeship && subtotal > 0) {
        return 0;
      }
      
      // Return shipping rate if subtotal is greater than 0
      return subtotal > 0 ? parseFloat(storeData.shiprate.toString()) : 0;
    }
    
    // Update cart totals
    function updateCartTotals(subtotal, tax, shipping, total) {
      if (cartSubtotal) cartSubtotal.textContent = `$${subtotal.toFixed(2)}`;
      if (cartTax) cartTax.textContent = `$${tax.toFixed(2)}`;
      if (cartShipping) cartShipping.textContent = `$${shipping.toFixed(2)}`;
      if (cartTotal) cartTotal.textContent = `$${total.toFixed(2)}`;
    }
    
    // Add event listeners to cart item buttons
    function addCartItemEventListeners() {
      // Increment item quantity
      document.querySelectorAll('.increment-item').forEach(button => {
        button.addEventListener('click', () => {
          const indexAttr = button.getAttribute('data-index');
          if (indexAttr) {
            const index = parseInt(indexAttr);
            incrementCartItem(index);
          }
        });
      });
      
      // Decrement item quantity
      document.querySelectorAll('.decrement-item').forEach(button => {
        button.addEventListener('click', () => {
          const indexAttr = button.getAttribute('data-index');
          if (indexAttr) {
            const index = parseInt(indexAttr);
            decrementCartItem(index);
          }
        });
      });
      
      // Remove item
      document.querySelectorAll('.remove-item').forEach(button => {
        button.addEventListener('click', () => {
          const indexAttr = button.getAttribute('data-index');
          if (indexAttr) {
            const index = parseInt(indexAttr);
            removeCartItem(index);
          }
        });
      });
    }
    
    // Increment cart item quantity
    function incrementCartItem(index) {
      const cartData = localStorage.getItem('cart');
      const cart = cartData ? JSON.parse(cartData) : [];
      
      if (cart[index]) {
        cart[index].quantity += 1;
        localStorage.setItem('cart', JSON.stringify(cart));
        renderCart();
        updateCartCount();
      }
    }
    
    // Decrement cart item quantity
    function decrementCartItem(index) {
      const cartData = localStorage.getItem('cart');
      const cart = cartData ? JSON.parse(cartData) : [];
      
      if (cart[index]) {
        if (cart[index].quantity > 1) {
          cart[index].quantity -= 1;
        } else {
          cart.splice(index, 1);
        }
        
        localStorage.setItem('cart', JSON.stringify(cart));
        renderCart();
        updateCartCount();
      }
    }
    
    // Remove cart item
    function removeCartItem(index) {
      const cartData = localStorage.getItem('cart');
      const cart = cartData ? JSON.parse(cartData) : [];
      
      if (cart[index]) {
        cart.splice(index, 1);
        localStorage.setItem('cart', JSON.stringify(cart));
        renderCart();
        updateCartCount();
      }
    }
    
    // Update cart count
    function updateCartCount() {
      const cartData = localStorage.getItem('cart');
      const cart = cartData ? JSON.parse(cartData) : [];
      const cartCount = cart.reduce((total, item) => total + item.quantity, 0);
      
      // Update cart count in header if element exists
      const cartCountElement = document.getElementById('cart-count');
      if (cartCountElement) {
        cartCountElement.textContent = cartCount.toString();
        
        if (cartCount > 0) {
          cartCountElement.classList.remove('hidden');
        } else {
          cartCountElement.classList.add('hidden');
        }
      }
    }
    
    // Initialize cart
    renderCart();
    updateCartCount();
  });
</script> 