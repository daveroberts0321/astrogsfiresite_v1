---
import Layout from '../layouts/Layout.astro';
import { storeData } from '../layouts/data';
import { optimizeImageUrl } from '../utils/imageUtils';
import Redis from 'ioredis';

// Environment variables - in a real app, these would be imported from .env
const REDIS = import.meta.env.REDIS || "redis://localhost:6379";
const FORTIS_ENV = import.meta.env.FORTIS_ENV || "production";

// Redis setup
const redisUrl = new URL(REDIS);
let baseUrl = "https://gunstorewebsite.com";
let baseTime = 600; // 600 seconds = 10 minutes

if (FORTIS_ENV === "sandbox") {
  baseUrl = "http://localhost:3000"; // local host for Go fiber backend 
  baseTime = 30; // 30 seconds for sandbox environment
}

const redisOptions = {
  host: redisUrl.hostname,
  port: parseInt(redisUrl.port), // Convert port to a number
  password: redisUrl.password,
  // Add other options as needed 
};

// Initialize Redis client
let redisClient;
try {
  redisClient = new Redis(redisOptions);
} catch (error) {
  console.error('Redis connection error:', error);
  // Continue without Redis if connection fails
}

// Enable server-side rendering for this route
export const prerender = false;

// Get the category ID from the URL
const { id } = Astro.params;
const categoryId = id || '0'; // Provide a default value to avoid undefined

// Get query parameters
const url = new URL(Astro.request.url);
const page = parseInt(url.searchParams.get('page') || '1');
const itemsPerPage = parseInt(url.searchParams.get('itemsPerPage') || '25');

// Fetch store data
const storeInfo = await storeData;
const store = {
  storename: storeInfo.store.storename,
  description: storeInfo.store.description,
  storenumber: storeInfo.store.storenumber,
  coverimage: storeInfo.store.coverphoto,
  logoimage: storeInfo.store.logoimage,
  // ... other store properties
};

// Data fetching functions
const fetchCategory = async (categoryId: string | undefined) => {
  if (!categoryId) return { category: null };
  
  try {
    const response = await fetch(`${baseUrl}/apicategorybyid_${categoryId}`);
    if (!response.ok) throw new Error('Failed to fetch category');
    return await response.json();
  } catch (error) {
    console.error('Error fetching category:', error);
    return { category: null };
  }
};

const fetchProducts = async (categoryId: string | undefined, page = 1, itemsPerPage = 25) => {
  if (!categoryId) return { products: [], total: 0 };
  
  try {
    const response = await fetch(`${baseUrl}/apiproductsbycategory_${categoryId}?page=${page}&itemsPerPage=${itemsPerPage}`);
    if (!response.ok) throw new Error('Failed to fetch products');
    return await response.json();
  } catch (error) {
    console.error('Error fetching products:', error);
    return { products: [], total: 0 };
  }
};

const fetchSubCategories = async (categoryId: string | undefined) => {
  if (!categoryId) return { subcategories: [] };
  
  try {
    const response = await fetch(`${baseUrl}/apisubcategoriesbycategory_${categoryId}`);
    if (!response.ok) throw new Error('Failed to fetch subcategories');
    return await response.json();
  } catch (error) {
    console.error('Error fetching subcategories:', error);
    return { subcategories: [] };
  }
};

// Data fetching with Redis caching
let categoryData;
let productsData;
let subcategoriesData;
let totalProducts = 0;
let totalPages = 0;

if (redisClient) {
  // Try to get data from Redis cache
  const cacheKey = `category:${categoryId}:subcategories:${categoryId}:page:${page}:itemsPerPage:${itemsPerPage}`;
  
  try {
    const cachedData = await redisClient.get(cacheKey);
    
    if (cachedData) {
      // Use cached data
      const parsedData = JSON.parse(cachedData);
      categoryData = parsedData.category;
      productsData = parsedData.products;
      subcategoriesData = parsedData.subcategories;
      totalProducts = parsedData.totalProducts || 0;
      totalPages = parsedData.totalPages || 0;
    } else {
      // Fetch fresh data
      const [categoryResponse, productsResponse, subcategoriesResponse] = await Promise.all([
        fetchCategory(categoryId),
        fetchProducts(categoryId, page, itemsPerPage),
        fetchSubCategories(categoryId)
      ]);
      
      categoryData = categoryResponse;
      productsData = productsResponse;
      subcategoriesData = subcategoriesResponse;
      
      totalProducts = productsData.total || 0;
      totalPages = Math.ceil(totalProducts / itemsPerPage);
      
      // Cache the data
      await redisClient.setex(
        cacheKey, 
        baseTime, 
        JSON.stringify({
          category: categoryData,
          products: productsData,
          subcategories: subcategoriesData,
          totalProducts,
          totalPages
        })
      );
    }
  } catch (error) {
    console.error('Redis error:', error);
    // Fallback to direct fetching if Redis fails
    const [categoryResponse, productsResponse, subcategoriesResponse] = await Promise.all([
      fetchCategory(categoryId),
      fetchProducts(categoryId, page, itemsPerPage),
      fetchSubCategories(categoryId)
    ]);
    
    categoryData = categoryResponse;
    productsData = productsResponse;
    subcategoriesData = subcategoriesResponse;
    
    totalProducts = productsData.total || 0;
    totalPages = Math.ceil(totalProducts / itemsPerPage);
  }
} else {
  // Direct fetching without Redis
  const [categoryResponse, productsResponse, subcategoriesResponse] = await Promise.all([
    fetchCategory(categoryId),
    fetchProducts(categoryId, page, itemsPerPage),
    fetchSubCategories(categoryId)
  ]);
  
  categoryData = categoryResponse;
  productsData = productsResponse;
  subcategoriesData = subcategoriesResponse;
  
  totalProducts = productsData.total || 0;
  totalPages = Math.ceil(totalProducts / itemsPerPage);
}

// Extract data
const category = categoryData?.category || {};
const products = productsData?.products || [];
const subcategories = subcategoriesData?.subcategories || [];

// Optimize images
category.image = optimizeImageUrl(category.categoryimage || (category.image && category.image.url));
products.forEach((product: any) => {
  product.image = optimizeImageUrl(product.productimage || (product.image && product.image.url));
});

// Page title
const pageTitle = category.categoryname ? `${category.categoryname} - ${store.storename}` : store.storename;
---

<Layout title={pageTitle}>
  <main class="max-w-7xl mx-auto px-4 py-8">
    <!-- Category Header -->
    <div class="mb-8">
      <h1 class="text-3xl font-bold text-gray-900 dark:text-white mb-2">{category.categoryname}</h1>
      {category.categorydesc && (
        <p class="text-gray-600 dark:text-gray-300">{category.categorydesc}</p>
      )}
    </div>

    <!-- Subcategories (if any) -->
    {subcategories.length > 0 && (
      <div class="mb-8">
        <h2 class="text-xl font-semibold text-gray-900 dark:text-white mb-4">Subcategories</h2>
        <div class="grid grid-cols-2 md:grid-cols-4 gap-4">
          {subcategories.map((subcat: any) => (
            <a 
              href={`/category_${subcat.ID}`}
              class="bg-white dark:bg-gray-700 p-3 rounded-lg shadow-md hover:shadow-lg transition text-center"
            >
              <span class="text-gray-900 dark:text-white font-medium">{subcat.categoryname}</span>
            </a>
          ))}
        </div>
      </div>
    )}

    <!-- Products Grid -->
    {products.length > 0 ? (
      <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-8 mb-8">
        {products.map((product: any) => (
          <a href={`/product_${product.ID}`} class="group">
            <div class="bg-white dark:bg-gray-700 rounded-lg overflow-hidden shadow-md transition hover:shadow-lg relative h-full">
              <div class="overflow-hidden">
                <img 
                  src={product.image} 
                  alt={product.productname} 
                  class="w-full h-72 object-cover transition duration-300 group-hover:scale-105"
                />
                
                {/* Stock indicator badge - only show if stock > 1 */}
                {product.productstock > 1 && (
                  <div class="absolute top-2 right-2 px-2 py-1 rounded-full text-xs font-semibold bg-green-500 text-white">
                    In Stock: {product.productstock}
                  </div>
                )}
              </div>
              <div class="p-4">
                <h3 class="text-lg font-semibold text-gray-900 dark:text-white">{product.productname}</h3>
                <div class="mt-2 flex items-center gap-2">
                  {product.productretailprice && product.productretailprice > product.productprice && (
                    <p class="text-red-400 line-through text-sm">
                      ${typeof product.productretailprice === 'number' ? product.productretailprice.toFixed(2) : '0.00'}
                    </p>
                  )}
                  <p class="text-red-600 font-bold">
                    ${typeof product.productprice === 'number' ? product.productprice.toFixed(2) : '0.00'}
                  </p>
                </div>
                <p class="text-gray-600 dark:text-gray-400 text-sm mt-2 line-clamp-2">{product.shortdescription || product.description}</p>
              </div>
              
              {/* Product details tooltip that appears on hover */}
              <div class="absolute inset-0 bg-black/80 opacity-0 group-hover:opacity-100 transition-all duration-300 
                  flex items-center justify-center p-6 z-10 pointer-events-none">
                <div class="text-white text-center max-w-xs mx-auto">
                  <h3 class="text-xl font-bold mb-2">{product.productname}</h3>
                  <div class="flex items-center justify-center gap-2 mb-3">
                    {product.productretailprice && product.productretailprice > product.productprice && (
                      <p class="text-red-400 line-through text-sm">
                        ${typeof product.productretailprice === 'number' ? product.productretailprice.toFixed(2) : '0.00'}
                      </p>
                    )}
                    <p class="text-red-500 font-bold">
                      ${typeof product.productprice === 'number' ? product.productprice.toFixed(2) : '0.00'}
                    </p>
                  </div>
                  {product.productstock > 1 && (
                    <p class="text-green-400 mb-3">In Stock: {product.productstock}</p>
                  )}
                  <p class="text-sm md:text-base leading-relaxed">{product.shortdescription || product.description}</p>
                </div>
              </div>
            </div>
          </a>
        ))}
      </div>
    ) : (
      <div class="text-center py-12">
        <p class="text-gray-600 dark:text-gray-300">No products found in this category.</p>
      </div>
    )}

    <!-- Pagination -->
    {totalPages > 1 && (
      <div class="flex justify-center mt-8">
        <nav class="flex items-center space-x-2">
          {page > 1 && (
            <a 
              href={`/category_${categoryId}?page=${page - 1}&itemsPerPage=${itemsPerPage}`}
              class="px-4 py-2 border rounded-md text-gray-700 dark:text-gray-200 hover:bg-gray-100 dark:hover:bg-gray-700"
            >
              Previous
            </a>
          )}
          
          <span class="px-4 py-2 border rounded-md bg-red-600 text-white">
            Page {page} of {totalPages}
          </span>
          
          {page < totalPages && (
            <a 
              href={`/category_${categoryId}?page=${page + 1}&itemsPerPage=${itemsPerPage}`}
              class="px-4 py-2 border rounded-md text-gray-700 dark:text-gray-200 hover:bg-gray-100 dark:hover:bg-gray-700"
            >
              Next
            </a>
          )}
        </nav>
      </div>
    )}
  </main>
</Layout> 